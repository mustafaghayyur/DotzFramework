====================================================
====================================================
	> USER MODULE
====================================================
====================================================


Authentication is vital in most web applications. Dotz provides a basic out-of-the-box authentication and authorization module. Following with the theme of the framework; we have left out the bells and whistles for your project team to add on as needed.

The User module will add only one table to your configured database (upon activation):

	`user table`
	---------------------------------------------------------------------------------
	|	Field		|	Type 			|	Description								|
	--------------------------------------------------------------------------------|
	|	id			|	<int>			|	auto increment, primary key				|
	|	email		|	<var(120)>		|	unique									|
	|	username	|	<var(120)>		|	unique									|
	|	password	|	<var(255)>		|	holds the password hash					|
	|	access_level|	<int>			|	access levels to be numeric				|
	|	status		|	<var(15)>		|	current status of account				|
	|	created_at	|	<date_time>		|	auto inserts current time stamp			|
	|	updated_at	|	<date_time>		|	auto inserts current time stamp			|
	---------------------------------------------------------------------------------


Any other user data can be configured and setup, along with application level code, by you in your src/App directory.

The User module allows you to securely manage two types of authentications:

	1) Session based authentication
	----------------------------------
		- relies on Symfony's Session Management library that comes with HTTP-Foundation. 

		- In Dotz v0.2.3 we have added the session library to our container as $mod['session'] in modules.php. You will need that definition for User module to work correctly.

			- Please see `vendor/dotz/framework/modules.php` as inspiration.

		- Upon successful registration and login, a session would be created with some relevent user details. Each SessionAuth::check() protected page would require the existence of the user's 'lastActivity' session key to access the controller/resource.


	2) Token based authentication
	----------------------------------
		- relies on JWT tokens. 

		- Upon successful registration and login a token consisting of user's basic data is returned to the user. The User can then pass along that token in each request in the HTTP Authorization header in the following format:

			`Authorization: Bearer <jwt-token>`

		If the token passed in the above format is valid, the TokenAuth::check() directive would return true (and allow the script to continue). Otherwise an error message would be returned in JSON format.




==================
## Setup
==================

When you first access a controller that calls any of the Auth() functions in a web browser; the User module's migrations and config files will be added to your project's root directories.

Instructions will be provided on screen (in your web browser) on how to run the migration in the command line terminal and adjust the configs/user.txt configuration file to properly use the user module.

Once you complete the instructions on screen, you can refresh that same page and the user module would start working as expected.


=======================
## Example
=======================

With future version releases of Dotz, more details will be added to the documentation. For now, you can take inspiration from: 
	
	vendor/dotz/framework/src/App/Controllers/UserController.php



=======================================
## Making it work with your project
=======================================

The User Module is meant to be minimal by intent. 

Every project has its own vision for user management. The User Module is meant to help you with authentication only.

We have added two fields to the user table:
	- access_level
	- status

We have also added a class ValidateAccess() to the User Module, which can be over-written and injected back into the User Module functions. See the User Module code-base for further details.

In theory you can apply a variety of permission models, simply converting them to numberic logic, and then applying filters in ValidateAccess::checkAccessLevel() method to achieve desired access levels model.

Similarly, we have tried to make the status field open to re-interpretation. As we added the ValidateAccess::checkStatus() method which attempts to provide one way of looking at the status field. You may, however, be able to use the given parameters and come up with your own process of how users should be categorized.

Be sure to look at:
	- ValidateAccess class
	- ValidateUserFields class

Look at the comments, and study the User Module code base, you will be better prepared to use the user module to work for your needs.



==============================
## In a nut shell...
==============================

The User module provides four main operations:

	1) login() - determines if the provided username and password are allowed to login and be provided a session or token to proceed.

	2) register() - determines if the given user details (in array format) can be added to the user table as valid credentials for a new user record.

	3) logout() - terminates a user session in Session auth. Provides expiry info to user in Token auth.

	4) check() - TokenAuth::check() and SessionAuth:check() are static methods meant to be called on every protected controller. When you add:

			TokenAuth::check();

	...to a controller in your application. All users will be blocked from accessing that controller, unless they pass the check.

	Token authentication would require a valid token to be passed in the Authorization HTTP header. While the Session based authentication would require a valid session.

Now you can use the appropriate Auth class, and its four methods to run your authentication system. For advanced developers, you can take this module to the next level and play around with access_levels and status fields as elaborated above.



====================================
## $auth->message
====================================

Several of the above mentioned operations might throw back feedback in the form of an error message or success notification. Such string messages are held in the TokenAuth::$message and SessionAuth::$message properties. 

So when you perform a login operation like so:

	$auth = new SessionAuth();

	if($auth->login()){
		// you can print a success message like so:
		echo $auth->message; 
	}


For TokenAuth, the logout() method additionally uses the TokenAuth::$status property to return a status string (usually error, notice or success). This can be useful for some applications.


The use of:
	
	$auth->message
	and
	$auth->status

...is illustrated in vendor/dotz/framework/src/App/Controllers/UserController.php.

